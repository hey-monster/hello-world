1、*.rc后缀的文件 <br>
2、C++继承/基类/派生类 <br>
3、成员函数可以定义在类定义内部，或者单独使用范围解析运算符 :: 来定义。在类定义中定义的成员函数把函数声明为内联的，即便没有使用 inline 标识符<br>
4、类访问修饰符及其在继承中的变化<br>
5、 new(mCblk) audio_track_cblk_t(); C++语法<br>
6、class AudioFlinger :  public BinderService<AudioFlinger>  ? 类模板的派生 <br>
* C++ 类构造函数 & 析构函数 <br> 

7、vector<int> twoSum(vector<int>& nums, int target)  引用、容器<br>

8、for (char c : s)  ---for循环遍历字符串<br>
9、静态数组与动态数组<br>
动态：通过new分配一个对象数组，并且需要释放，是在堆上分配内存<br>

10、结构体命名时后缀 -t,-s,-e一般意思typedef 语句定义的类型一般用_t作后缀， 而enum类型一般以_e作后缀<br>

11、C++ Lambda表达式基本用法<br>
创建一个匿名函数并执行。Objective-C采用的是上尖号^，而C++ 11采用的是配对的方括号[]。实例如下：
#include <iostream>
using namespace std;
int main()
{
    []{
        cout << "Hello,Worldn"; 
    }();
}
我们也可以方便的将这个创建的匿名函数赋值出来调用：

#include <iostream>
using namespace std;
int main()
{
    int i = 1024;
    auto func = [](int i) { // (int i) 是指传入改匿名函数的参数
        cout << i;
    };
    func(i);
}

[&]引用捕获
#include <iostream>
using namespace std;
 
int main()
{
    int i = 1024;
    cout << &i << endl;
    auto fun1 = [&]{
        cout << &i << endl;
    };
    fun1();
}

12、std::reference_wrapper
13、
