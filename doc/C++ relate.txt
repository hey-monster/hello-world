1、*.rc后缀的文件 <br>
2、C++继承/基类/派生类 <br>
3、成员函数可以定义在类定义内部，或者单独使用范围解析运算符 :: 来定义。在类定义中定义的成员函数把函数声明为内联的，即便没有使用 inline 标识符<br>
4、类访问修饰符及其在继承中的变化<br>
5、 new(mCblk) audio_track_cblk_t(); C++语法<br>
6、class AudioFlinger :  public BinderService<AudioFlinger>  ? 类模板的派生 <br>
* C++ 类构造函数 & 析构函数 <br> 

7、vector<int> twoSum(vector<int>& nums, int target)  引用、容器<br>

8、for (char c : s)  ---for循环遍历字符串<br>
9、静态数组与动态数组<br>
动态：通过new分配一个对象数组，并且需要释放，是在堆上分配内存<br>

10、结构体命名时后缀 -t,-s,-e一般意思typedef 语句定义的类型一般用_t作后缀， 而enum类型一般以_e作后缀<br>

11、C++ Lambda表达式基本用法<br>
创建一个匿名函数并执行。Objective-C采用的是上尖号^，而C++ 11采用的是配对的方括号[]。实例如下：
#include <iostream>
using namespace std;
int main()
{
    []{
        cout << "Hello,Worldn"; 
    }();
}
我们也可以方便的将这个创建的匿名函数赋值出来调用：

#include <iostream>
using namespace std;
int main()
{
    int i = 1024;
    auto func = [](int i) { // (int i) 是指传入改匿名函数的参数
        cout << i;
    };
    func(i);
}

[&]引用捕获
#include <iostream>
using namespace std;
 
int main()
{
    int i = 1024;
    cout << &i << endl;
    auto fun1 = [&]{
        cout << &i << endl;
    };
    fun1();
}

12、std::reference_wrapper
13、const用在函数前后作用
14、二维vector的初始化
一维向量：
vector<int> vector_1D_1;//只定义向量
vector<int> vector_1D_2(n);//定义的同时初始化大小
vector<int> vector_1D_3(n,m);//定义的同时初始化大小为n,元素初始值为m
vector<int> vector_1D_4;
vector_1D_4=vector<int>(n,m);//先定义变量，再初始化大小和初值
二维向量：
vector<vector<int> > vector_2D_1;
vector<vector<int> > vector_2D_2(n);//仅指定第一维大小
vector<vector<int> > vector_2D_3(n,vector<int>(m));//指定维度为n*m
vector<vector<int> > vector_2D_4(n,vector<int>(m,x));//指定维度为n*m并初始化初值为x
vector<vector<int> > vector_2D_5(n,vector_1D_3);//使用已知向量来初始化，第二维大小和vector_1D_3一样
三维向量：
vector< vector< vector<int> > > vector_3D_1;
vector< vector< vector<int> > > vector_3D_2(n);//仅指定第一维大小
vector< vector< vector<int> > > vector_3D_3(n,vector<vector<int>>(m,vector<int>(y)));//初始化维度大小为n*m*y.
vector< vector< vector<int> > > vector_3D_4(n,vector<vector<int>>(m,vector<int>(y，x)));//初始化维度大小为n*m*y,全部初始值为x。
vector< vector< vector<int> > > vector_3D_5(n，vector_2D_4）//使用已知向量来初始化，除了第一维是n，其他维度和已知向量
